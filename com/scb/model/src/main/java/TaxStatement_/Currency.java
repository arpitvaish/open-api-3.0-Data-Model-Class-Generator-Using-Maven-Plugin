/*
 * Taxation Domain Model
 * Domain model for Tax data for Reporting Engine
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package TaxStatement_;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Currency Code
 */
public enum Currency {
  AFN("AFN"),
  EUR("EUR"),
  ALL("ALL"),
  DZD("DZD"),
  USD("USD"),
  AOA("AOA"),
  XCD("XCD"),
  ARS("ARS"),
  AMD("AMD"),
  AWG("AWG"),
  AUD("AUD"),
  AZN("AZN"),
  BSD("BSD"),
  BHD("BHD"),
  BDT("BDT"),
  BBD("BBD"),
  BYR("BYR"),
  BZD("BZD"),
  XOF("XOF"),
  BMD("BMD"),
  BTN("BTN"),
  INR("INR"),
  BOB("BOB"),
  BOV("BOV"),
  BAM("BAM"),
  BWP("BWP"),
  NOK("NOK"),
  BRL("BRL"),
  BND("BND"),
  BGN("BGN"),
  BIF("BIF"),
  KHR("KHR"),
  XAF("XAF"),
  CAD("CAD"),
  CVE("CVE"),
  KYD("KYD"),
  CLF("CLF"),
  CLP("CLP"),
  CNY("CNY"),
  COP("COP"),
  COU("COU"),
  KMF("KMF"),
  CDF("CDF"),
  NZD("NZD"),
  CRC("CRC"),
  HRK("HRK"),
  CUC("CUC"),
  CUP("CUP"),
  ANG("ANG"),
  CZK("CZK"),
  DKK("DKK"),
  DJF("DJF"),
  DOP("DOP"),
  EGP("EGP"),
  SVC("SVC"),
  ERN("ERN"),
  ETB("ETB"),
  FKP("FKP"),
  FJD("FJD"),
  XPF("XPF"),
  GMD("GMD"),
  GEL("GEL"),
  GHS("GHS"),
  GIP("GIP"),
  GTQ("GTQ"),
  GBP("GBP"),
  GNF("GNF"),
  GYD("GYD"),
  HTG("HTG"),
  HNL("HNL"),
  HKD("HKD"),
  HUF("HUF"),
  ISK("ISK"),
  IDR("IDR"),
  XDR("XDR"),
  IRR("IRR"),
  IQD("IQD"),
  ILS("ILS"),
  JMD("JMD"),
  JPY("JPY"),
  JOD("JOD"),
  KZT("KZT"),
  KES("KES"),
  KPW("KPW"),
  KRW("KRW"),
  KWD("KWD"),
  KGS("KGS"),
  LAK("LAK"),
  LBP("LBP"),
  LSL("LSL"),
  ZAR("ZAR"),
  LRD("LRD"),
  LYD("LYD"),
  CHF("CHF"),
  MOP("MOP"),
  MKD("MKD"),
  MGA("MGA"),
  MWK("MWK"),
  MYR("MYR"),
  MVR("MVR"),
  MRO("MRO"),
  MUR("MUR"),
  XUA("XUA"),
  MXN("MXN"),
  MXV("MXV"),
  MDL("MDL"),
  MNT("MNT"),
  MAD("MAD"),
  MZN("MZN"),
  MMK("MMK"),
  NAD("NAD"),
  NPR("NPR"),
  NIO("NIO"),
  NGN("NGN"),
  OMR("OMR"),
  PKR("PKR"),
  PAB("PAB"),
  PGK("PGK"),
  PYG("PYG"),
  PEN("PEN"),
  PHP("PHP"),
  PLN("PLN"),
  QAR("QAR"),
  RON("RON"),
  RUB("RUB"),
  RWF("RWF"),
  SHP("SHP"),
  WST("WST"),
  STD("STD"),
  SAR("SAR"),
  RSD("RSD"),
  SCR("SCR"),
  SLL("SLL"),
  SGD("SGD"),
  XSU("XSU"),
  SBD("SBD"),
  SOS("SOS"),
  SSP("SSP"),
  LKR("LKR"),
  SDG("SDG"),
  SRD("SRD"),
  SZL("SZL"),
  SEK("SEK"),
  CHE("CHE"),
  CHW("CHW"),
  SYP("SYP"),
  TWD("TWD"),
  TJS("TJS"),
  TZS("TZS"),
  THB("THB"),
  TOP("TOP"),
  TTD("TTD"),
  TND("TND"),
  TRY("TRY"),
  TMT("TMT"),
  UGX("UGX"),
  UAH("UAH"),
  AED("AED"),
  USN("USN"),
  UYI("UYI"),
  UYU("UYU"),
  UZS("UZS"),
  VUV("VUV"),
  VEF("VEF"),
  VND("VND"),
  YER("YER"),
  ZMW("ZMW"),
  ZWL("ZWL"),
  XBA("XBA"),
  XBB("XBB"),
  XBC("XBC"),
  XBD("XBD"),
  XTS("XTS"),
  XXX("XXX"),
  XAU("XAU"),
  XPD("XPD"),
  XPT("XPT"),
  XAG("XAG");

  private String value;

  Currency(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Currency fromValue(String text) {
    for (Currency b : Currency.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }
}
